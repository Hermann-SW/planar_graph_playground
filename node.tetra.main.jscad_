function main(params) {
    var tvtxt = (params.vtxt === 'Type') ? 1 : (params.vtxt === 'theta') ? 2 : (params.vtxt === 'phi') ? 3 : 0

    var vtype_ = []
    forall_vertices(G, function(v) {
	vtype_.push([v, vtype[v].toString(), rad2deg(coords[v][1]).toFixed(1), rad2deg(coords[v][0]).toFixed(1)])
    })

    var sub = [cube({size: (params.look_inside === 'yes')?sc+0.1:0.01, center: [sc/2,-sc/2,sc/2]})]

    var pal = [ [0.7, 0.0, 0], [0, 0.4, 0.4], [0, 0.7, 0], [0.4, 0, 0.4], [0, 0, 0.7], [0.4, 0.4, 0] ]
    console.log("pal:", pal)

    var ret = []

    console.log("M.length main:", M.length);

    var Ms = [M[0], M[1], M[2], M[3]]

    forall_vertices(G, function(v) {
	if (Ms.includes(v)) {
	    ret.push(colorize([0.7, 0, 0], 
                         vertex(v, params.half && ((tvtxt !== 1) || (vtype[v] !== 0)))
	             )
            )
        } else {
	    ret.push(vertex(v, params.half && ((tvtxt !== 1) || (vtype[v] !== 0))))
        }
    });

    forall_edges(G, function(e) {
        if (!no_e21 || (e !== 21)) {
            if (evisited[e]) {
		ret.push(colorize([1,0.66666,0],
                                  edge2(source(G, e), target(G, e), e)
                         )
                )
            } else {
		ret.push(edge2(source(G, e), target(G, e), e))
            }
        }
    });

    if (params.faces === 'Pentagons') {
        pent.forEach(function(face) {
            console.log(face)

	    ret.push(sp_tria(face[0], face[1], face[2], sub))
            ret.push(sp_tria(face[0], face[2], face[3], sub))
            ret.push(sp_tria(face[0], face[3], face[4], sub))
        })
    }

    if (params.faces === '6coloring') {
        faces(G).forEach(function(face, i) {
            console.log(face, i, col[i])
            while (face.length >= 3) {
                ret.push(colorize(pal[col[i]], sp_tria(face[0], face.at(-2), face.at(-1), sub)))
                face.pop()
            }
	})
    }

    if (params.white) {
        ret.push(colorize([1,1,1],
                     subtract(
                         sphere({radius: sc, segments: 30})
                         ,sphere({radius: sc-0.1, segments: 30})
                         ,sub 
                     )
                 )
        )
    }

    if (params.vtxt !== 'None') {
        forall_vertices(G, function(v) {
            ret.push(vtxt(v, vtype_[v][tvtxt]))
        });
    }

    return ret
}
